; vim: ft=scheme
#include histogram.church

(define N 10)
;(define (nat-operator) (uniform-draw '(+ - *))) ; No division: Produces fractional types from integers
;(define (pos-operator) (uniform-draw '(+ *)))
(define (nat-operator) (uniform-draw '(+ *)))
(define (integer)  (random-integer N))
(define (atom) (if (flip) (integer) 'x))
;(define (expression) (uniform-draw (list (atom)
;                                         (list (nat-operator) 'x (atom)))))
;(define (expression) (uniform-draw (list (atom)
;                                         (list (nat-operator) 'x (atom)))))
; Flip needed for stochastic recursion, uniform-draw does not work
;(define max-depth 5)

(define (inner-expression depth) (if (or (flip) (= depth 0))
                           (atom)
                           (list (nat-operator) (atom) (inner-expression (- depth 1)))))
(define (expression) (inner-expression 5))

(define (even? n) (= (modulo n 2) 0))
(define (odd? n) (not (even? n)))
(define (condition-op) (uniform-draw '(even? odd?)))
(define (conditional-expression) (list (condition-op) (expression)))
(define (conditional-body) (list 'if (conditional-expression)
                                       (expression)
                                       (expression)
                                       ))

;(define (test)
;  (multinomial (list (+ 1 (test)) 0) (list (/ 1 2) (/ 1 2))))
  ;(if (flip)
  ;    (+ 1 (test))
  ;    0))
;(define (expression) (uniform-draw
;                      (list
;                       (atom)
;                       (list (nat-operator) 'x (atom))
;                       (list (nat-operator) (atom) 'x))))

(define (custom-range a b) 
  (if (> a b)
      (reverse (range b a))
      (range a b)))
(define (random-range n) 
  (custom-range 0 (random-integer n)))

(define (create-repeat) (list 'repeat (expression) (list 'lambda '() (expression))))
(define (create-range)  (list 'custom-range  (expression) (expression)))
(define (list-literal)  (append '(list)
                                (map (lambda () (expression)) 
                                (random-range 5))))
(define (list-type)     (uniform-draw (list (create-repeat) (create-range) (list-literal))))
(define (concat)        (list 'flatten (append '(list)
                                               (map (lambda () (list-type)) 
                                                (random-range 1)))))

;(define (high-level-type) (uniform-draw (list (concat))));(concat) (list-type))))
;(define (high-level-type) (uniform-draw (list (concat) (list-type) (expression))));(concat) (list-type))))
(define (high-level-type) (uniform-draw (list (expression)))); (conditional-body))));(concat) (list-type))))
;(define (high-level-type) (uniform-draw (list (list-type concat))));(concat) (list-type))))
(define (f) (list 'lambda '(x) (high-level-type)))
;(define (f) (list 'lambda '(x) (expression)))
;(define (f) (list 'lambda '(x) (create-repeat)))
;(define (f) (list 'lambda '(x) (list-literal)))
;(define (alt-f) (list 'lambda '(x) (conditional-body)))

;(define t (alt-f))
;(console-log t)
;(flatten (map (eval t) (custom-range 1 N)))

(define list-expression (mh-query 100 10
  (define test-f (f))
  (define n (integer))
  (define func (eval test-f))
  (define over (custom-range 1 n))
  ;(console-log over)
  ;(console-log (flatten (map func over)))
  (define created (flatten (map func over)))
  ;(define l (list 0 1 0 1 0))
  (define l (list 3 6 10 15 21))
  (list test-f "over range 0 -" n)
  (condition (and
               (equal? created l)
               ))
  ))
(histogram list-expression)
