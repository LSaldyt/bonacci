;;first a helper function that makes a polynomial function, given the coefficients:
(define (make-poly c)
  (lambda (x) (apply + (map (lambda (a b) (* a (expt x b))) c (iota (length c))))))

;;now set up the observed data:
(define x-vals (range -5 5))
(define obs-y-vals '(-0.199 -0.208 -0.673 -0.431 -0.360 -0.478 -0.984 0.516 1.138 2.439 3.501))

;;y-vals generated from:
;(define true-y-vals (map (make-poly '(-.5 0.3 .1)) x-vals))
;(define obs-y-vals (map (lambda (x) (gaussian x 0.4)) true-y-vals))

(define (noisy-equals? x y)
  (log-flip (* -1000 (expt (- x y) 2))))

;;the actual curve inference:
(define samples
  (mh-query
   400 20

   (define poly-order (sample-integer 4))
   (define coefficients (repeat (+ poly-order 1) (lambda () (gaussian 0.0 2.0))))

   (define y-vals (map (make-poly coefficients) x-vals))

   (list poly-order coefficients)

   (all (map noisy-equals? y-vals obs-y-vals))
   )
  )

;;now let's look at the results:
(hist (map first samples) "Polynomial degree")

;;find the average coefficients for sampled polynomials of each order:
(define (mean-coeffs order)
  (let ((coeffs (map second (filter (lambda (s) (= order (first s))) samples))))
    (if (null? coeffs)
        '()
        (map (lambda (c) (mean c)) (apply zip coeffs)))))


;;set up graphing:
(define plot-x-vals (map (lambda (x) (/ x 10)) (range -50 50)))
(define plot-0-y-vals (map (make-poly (mean-coeffs 0)) plot-x-vals))
(define plot-1-y-vals (map (make-poly (mean-coeffs 1)) plot-x-vals))
(define plot-2-y-vals (map (make-poly (mean-coeffs 2)) plot-x-vals))
(define plot-3-y-vals (map (make-poly (mean-coeffs 3)) plot-x-vals))

(define (adjust points)
  (map (lambda (p) (+ (* (+ p 5) 25) 25))
       points))

;; 0th order polynomial
(define paper-0 (make-raphael "polynomial-0" 250 250))
(raphael-points paper-0 (adjust x-vals) (adjust obs-y-vals))
(raphael-lines paper-0 (adjust plot-x-vals) (adjust plot-0-y-vals))

;; 1st order polynomial
(define paper-1 (make-raphael "polynomial-1" 250 250))
(raphael-points paper-1 (adjust x-vals) (adjust obs-y-vals))
(raphael-lines paper-1 (adjust plot-x-vals) (adjust plot-1-y-vals))

;; 2nd order polynomial
(define paper-2 (make-raphael "polynomial-2" 250 250))
(raphael-points paper-2 (adjust x-vals) (adjust obs-y-vals))
(raphael-lines paper-2 (adjust plot-x-vals) (adjust plot-2-y-vals))

;; 3rd order polynomial
(define paper-3 (make-raphael "polynomial-3" 250 250))
(raphael-points paper-3 (adjust x-vals) (adjust obs-y-vals))
(raphael-lines paper-3 (adjust plot-x-vals) (adjust plot-3-y-vals))

'done
